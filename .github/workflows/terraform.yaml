name: Build and Test

on:
  push:
    # branches: [ main ]
  pull_request:
    
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TF_CLOUD_ORGANIZATION: "${{ vars.BMB_TF_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ vars.TF_WORKSPACE }}"
  CONFIG_DIRECTORY: "./terraform"

jobs:

  test-python:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m unittest discover -s tests
    
  build-docker-image:
    # if: github.ref == 'refs/heads/main'
    needs: [test-python]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      API_IMAGE_TAG: ${{ fromJson(steps.meta.outputs.json).tags[0] }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: latest=true
          tags: type=sha

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
        #   file: ./src/FIAP.TechChallenge.ByteMeBurger.Api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=

  create-cron-job:
    if: github.ref == 'refs/heads/main'
    needs: [build-docker-image]
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .auto.tfvars file
        env:
          API_IMAGE_TAG: ${{needs.build-docker-image.outputs.API_IMAGE_TAG}}
        run: |
          cat <<EOF > tf/api.auto.tfvars
          neo4j_uri = "${{ vars.NEO4J_URI }}"
          neo4j_user ="${{ vars.NEO4J_USER }}"
          neo4j_password = "${{ vars.NEO4J_PASSWORD }}"
          sqs_queue_name = "${{ vars.SQS_QUEUE_NAME }}"
          access_key_id = "${{ secrets.AWS_CRONJOB_ACCESS_KEY_ID }}"
          secret_access_key = "${{ secrets.AWS_CRONJOB_SECRET_ACCESS_KEY }}"
          eks_cluster_name = "${{ vars.BMB_EKS_CLUSTER_NAME }}"
          EOF

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
          message: "Create Run from GitHub Actions CI ${{ github.sha }}"

      - uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.1
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Confirmed from GitHub Actions CI ${{ github.sha }}"